#! /bin/bash

# Safely execute this bash script
# e exit on first failure
# u unset variables are errors
# f disable globbing on *
# pipefail | produces a failure code if any stage fails
set -euf -o pipefail

# Get the directory of this script
LOCAL_DIRECTORY="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# Setup virtual environment
PYTHON_ENV=$(python3 -c "import sys; sys.stdout.write(sys.prefix) if (hasattr(sys, 'real_prefix') or sys.base_prefix != sys.prefix) else sys.stdout.write('0')")
if [[ $PYTHON_ENV == 0 ]];
then
echo "Not in virtual environment"

ACTIVATE=/tmp/mlcommons-environment/bin/activate

if [ ! -f $ACTIVATE ]; then
echo "Virtual environment doesn't exist, making it..."
python3 -m venv /tmp/mlcommons-environment
python -m pip install --upgrade pip > /dev/null
fi

source $ACTIVATE
else
echo "Running in virtual environment $PYTHON_ENV"
fi

# Make sure requirements are installed
pip install -r requirements.txt > /dev/null

# Set bash environment
PYTHONPATH="$LOCAL_DIRECTORY/micro-services/cloud-hal/source"
PYTHONPATH+=":$LOCAL_DIRECTORY/micro-services/data-book/source"
PYTHONPATH+=":$LOCAL_DIRECTORY/micro-services/peoples-speech/source"
PYTHONPATH+=":$LOCAL_DIRECTORY/micro-services/task-manager/source"
PYTHONPATH+=":$LOCAL_DIRECTORY/micro-services/ingestion/source"
PYTHONPATH+=":$LOCAL_DIRECTORY/micro-services/quality/source"
PYTHONPATH+=":$LOCAL_DIRECTORY/micro-services/data-export/source"
PYTHONPATH+=":$LOCAL_DIRECTORY/micro-services/forced-alignment/source"
PYTHONPATH+=":$LOCAL_DIRECTORY/micro-services/search/source"
export PYTHONPATH

# Launch it
python $LOCAL_DIRECTORY/micro-services/command-line-interface/source/cli/peoples-speech.py "$@"



